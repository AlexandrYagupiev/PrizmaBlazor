@page "/Dispatcher"
@using Microsoft.AspNetCore.Components.Web
@rendermode RenderMode.InteractiveServer
@inject IHttpClientFactory ClientFactory
@using System.Text.Json
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using Newtonsoft.Json;
@using Newtonsoft.Json.Converters;
@inject IJSRuntime JsRuntime;

<PageTitle>Dispatcher</PageTitle>

<div class="TopTables">
    <div class="TableGroupNameAcceptContainer">
       <strong>ПРИНЯТЬ КОНТЕЙНЕР НА ТЕРМИНАЛ</strong>
   </div>
    <div class="TableGroupNameIssueContainer">
       <strong>ВЫДАТЬ КОНТЕЙНЕР С ТЕРМИНАЛА</strong>
    </div>
    <div class="TableGroupNameIssueStock">
        <strong>СТОК ВЫДАЧИ</strong>
    </div>
    <div class="TableGroupNameMovementTerminal">
        <strong>ТЕРМИНАЛ ПЕРЕМЕЩЕНИЯ</strong>
    </div>
</div>


<div class="TopLine">
    <label for="SchemeSelect">Схема:</label>
    <select id="SchemeSelect" name="SchemeSelect">
        @for (int i = 1; i <=3; i++)
        {
            <option value="Test">Test</option>
        }
    </select>
    <input id="ButtonChangeMode" name="ButtonChangeMode" type="button" value=" Вкл. режим редактирования " @onclick="HTmlPopupMenu"> |
    <input id="ButtonUpdateSchema" name="ButtonUpdateSchema" type="button" value=" Обновить схему "> |
    <button name="ButtonDownloadDiagram" @onclick="HtmlShems">Загрузить схему</button>
@*     <button onclick="HtmlTableBody()">Тест js net</button> *@
    <input type="text" id="ContainerNumber" class="ContainerNumber" placeholder="Поиск по № контейнера" @oninput='ContainerSearch' @onchange="ContainerSearch" />
</div>

@((MarkupString)popupMenu)

<div class="BottomDiagram" id="BottomDiagram" @onclick="HtmlTableBody">
   @*  <BECanvas Width="500" Height="500" @ref="_canvasReference"></BECanvas> *@ 
    @((MarkupString)schemHtml)
</div>

    <table class="BottomTable" id="BottomTable"> @* Таблица контейнеров *@
        <thead>
            <tr>
                <th>Этаж</th>
                <th>Положение</th>
                <th>Тип</th>
                <th>Номер</th>
                <th>Грузоподъемность</th>
                <th>Тара</th>
                <th>Владелец</th>
                <th>Дата завоза</th>
                <th>Спец.отметки</th>
                <th>Перевозчик по разнарядке</th>
                <th>Экспедитор</th>
                <th>Порож</th>
                <th>Заявка КТ 2.0</th>
                <th>Направление</th>
                <th>Номер заявки</th>
                <th>Статус</th>
            </tr>
        </thead>
        <tbody>
        @((MarkupString)topTableBodyHtml)
        </tbody>
    </table>



<script>
    let doc = document.querySelector('.BottomDiagram'); //зона для работы click
    let div = ""; //Div в котором производим манипуляции
    let positionZone = "";//Позиция ячейки в таблице
    let elTop = 0;//Координата Y для div
    let elLeft = 0;//Координата X для div
    let activeElement = "";//Элемент который выбрали для поворота
    let degree = "0";//Градус поворота
    let containerNumberText = "";

    doc.addEventListener('click', function (event) { //Получение названия div при событий click
        div = ".div" + event.target.getAttribute('Class');
        // alert(event.target.getAttribute('id')); //Проверка работы currentTarget
        positionZone = event.target.getAttribute('Id');        
        elTop = doc.querySelector(div).offsetTop;
        elLeft = doc.querySelector(div).offsetLeft;     
    });

    function positionZoneNet() {
        return positionZone;
    }

    function containerNumberValue() {
        containerNumberText = document.getElementById('ContainerNumber').value;
        return containerNumberText;
    }

    function changeStrokeColor(divName) 
    {
        document.getElementById(divName).scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'center' })
        // document.getElementById("BottomDiagram").scrollIntoView(document.getElementById(divName).parentNode);
        document.getElementById(divName).style.border = "2px solid red";
    }

    function cleaningStrokeColor(divName) {
        document.getElementById(divName).style.border = "1px solid white";
    }


    function moveElement(evt) {//Перемещение div клавишами WASD
        let keypress = evt.keyCode;
        if (div != null) //Проверка что div задан
        {
            if (keypress == 87) { //Передвижение div вверх клавишей W
                doc.querySelector(div).style.top = (elTop = elTop - 5) + 'px';
            }
            if (keypress == 83) { //Передвижение div вниз клавишей S
                doc.querySelector(div).style.top = (elTop = elTop + 5) + 'px';
            }
            if (keypress == 65) { //Передвижение div влево клавишей A
                doc.querySelector(div).style.left = (elLeft = elLeft - 5) + 'px';
            }
            if (keypress == 68) { //Передвижение div вправо клавишей D
                doc.querySelector(div).style.left = (elLeft = elLeft + 5) + 'px';
            }
            if (keypress == 81) { //Поворот div влево клавишей Q
                degree -= 5;
                if (degree != null) {
                    doc.querySelector(div).style.transform
                        = "rotate(" + degree + "deg)";
                }
            }
            if (keypress == 69) { //Поворот div вправо клавишей E
                degree += 5;
                if (degree != null) {
                    doc.querySelector(div).style.transform
                        = "rotate(" + degree + "deg)";
                }
            }
            if (keypress == 13) {
                
            }
        }
    }
    document.addEventListener("keydown", moveElement);
</script>

@* <script>
    window.containerSearch = () => {
        DotNet.invokeMethodAsync('TMS.Web', 'ContainerSearch')
            .then(data => {
                console.log(data);
            });
    };
</script> *@




<script>//Cкролл BottomDiagram при зажатий левой кнопки мыши    
    (function () {
        let speed = 1; // Скорость скролла.
        let scroll = document.querySelector('.BottomDiagram'); //зона скролла
        let left = 0; // отпустили мышку - сохраняем положение скролла x
        let top = 0;  // отпустили мышку - сохраняем положение скролла y
        let drag = false;
        let coorX = 0; // нажали мышку - сохраняем координаты x.
        let coorY = 0; // нажали мышку - сохраняем координаты y.
        event.preventDefault();
            scroll.addEventListener('mousedown', function (e) {
                if (event.button == 0 || event.button == 1) {
                    drag = true;
                    coorX = e.pageX - this.offsetLeft;
                    coorY = e.pageY - this.offsetTop;
                }
            });
            document.addEventListener('mouseup', function (e) {
            if (event.button == 0 || event.button == 1)
            {
                drag = false;
                left = scroll.scrollLeft;
                top = scroll.scrollTop;
            }
            });
            scroll.addEventListener('mousemove', function (e) {
                if (drag) {
                    this.scrollLeft = left - (e.pageX - this.offsetLeft - coorX) * speed;
                    this.scrollTop = top - (e.pageY - this.offsetTop - coorY) * speed;
                }
            });
    })();
</script>



@code{
    string schemHtml = ""; //HTML код для заполнения div BottomDiagram
    string topTableBodyHtml = "";  //HTML код для заполнения тела таблицы BottomTable
    string containerNumber = "";
    string idZone = "";
    string popupMenu = "";
    string nameIdZone = "";
    string oldnameIdZone = "";
  
    async Task HtmlShems()
    {
        schemHtml = ""; //Очистка перед отрисовкой
        try
        {
            var stocksList = await StocksListJson();
            for (int g = 0; g < stocksList.GraphicalObjectsScheme.Count; g++) //Отрисовка графических элементов
            {
                if (stocksList.GraphicalObjectsScheme[g].HorizontalText == true)
                {
                    schemHtml += "<style type=\"text/css\">"
                  + ".GraphicalObjects" + stocksList.GraphicalObjectsScheme[g].Id + "{position:absolute;top:" + stocksList.GraphicalObjectsScheme[g].PositionY + "px;left:" + stocksList.GraphicalObjectsScheme[g].PositionX + "px;border-width:1px; border-color:black;border-style:solid;width:" + stocksList.GraphicalObjectsScheme[g].Width + "px;height:" + stocksList.GraphicalObjectsScheme[g].Height + "px;}"
                  + ".Text" + stocksList.GraphicalObjectsScheme[g].Id + " {font-size:" + stocksList.GraphicalObjectsScheme[g].FontSize + "px;top:" + stocksList.GraphicalObjectsScheme[g].PositionTextY + "px;left:" + stocksList.GraphicalObjectsScheme[g].PositionTextX + "px;width:" + stocksList.GraphicalObjectsScheme[g].WidthTxt + "px;height:" + stocksList.GraphicalObjectsScheme[g].HeightTxt + "px;border: 1px solid black;text-align: center;overflow:hidden;position:absolute;font-weight:bold;}"
                  + "</style>"
                  + "<div class=\"GraphicalObjects" + stocksList.GraphicalObjectsScheme[g].Id + "\">"
                  + "<div class=\"Text" + stocksList.GraphicalObjectsScheme[g].Id + "\">"
                  + stocksList.GraphicalObjectsScheme[g].Text
                  + "</div>"
                  + "</div>";
                }
                else if (stocksList.GraphicalObjectsScheme[g].HorizontalText == false)
                {
                    schemHtml += "<style type=\"text/css\">"
                  + ".GraphicalObjects" + stocksList.GraphicalObjectsScheme[g].Id + "{position:absolute;top:" + stocksList.GraphicalObjectsScheme[g].PositionY + "px;left:" + stocksList.GraphicalObjectsScheme[g].PositionX + "px;border-width:1px; border-color:black;border-style:solid;width:" + stocksList.GraphicalObjectsScheme[g].Width + "px;height:" + stocksList.GraphicalObjectsScheme[g].Height + "px;}"
                  + ".Text" + stocksList.GraphicalObjectsScheme[g].Id + " {font-size:" + stocksList.GraphicalObjectsScheme[g].FontSize + "px;top:" + stocksList.GraphicalObjectsScheme[g].PositionTextY + "px;left:" + stocksList.GraphicalObjectsScheme[g].PositionTextX + "px;width:" + stocksList.GraphicalObjectsScheme[g].WidthTxt + "px;height:" + stocksList.GraphicalObjectsScheme[g].HeightTxt + "px; border: 1px solid black;text-align: center; writing-mode: vertical-lr;overflow:hidden;position:absolute;font-weight:bold;}"
                  + "</style>"
                  + "<div class=\"GraphicalObjects" + stocksList.GraphicalObjectsScheme[g].Id + "\">"
                  + "<div class=\"Text" + stocksList.GraphicalObjectsScheme[g].Id + "\">"
                  + stocksList.GraphicalObjectsScheme[g].Text
                  + "</div>"
                  + "</div>";
                }
            }
            for (int p = 0; p < stocksList.Stocks.Count; p++)//Отрисовка таблиц
            {
                if (stocksList.Stocks[p].Orientation == 1) //Отрисовка горизонтально    
                {
                    schemHtml += "<style type=\"text/css\">"
                    + ".divTable" + stocksList.Stocks[p].Id + "{-moz-transform: rotate(0deg);-webkit-transform: rotate(0deg);-o-transform: rotate(0deg);table-layout: fixed;overflow:hidden;position:absolute;top:" + stocksList.Stocks[p].PositionY + "px;left:" + stocksList.Stocks[p].PositionX + "px;table-layout: fixed;}"
                    + ".divTable" + stocksList.Stocks[p].Id + " TH {font-weight: bold;padding: 1px;text-align:center;font-size: 10px;}"
                    + ".divTable" + stocksList.Stocks[p].Id + " TD {border: 1px solid black;padding: 1px;text-align: center;font-size: 10px;}"
                    + ".divTable" + stocksList.Stocks[p].Id + " TD:hover {border: 1px solid black;padding: 1px;text-align: center;font-size: 10px;background: #F08080;}"
                    + "</style>"
                    + "<div class=\"divTable" + stocksList.Stocks[p].Id + "\" id=\"Table" + stocksList.Stocks[p].Id + "\">"
                    + "<strong>" + stocksList.Stocks[p].Name + "</strong>"
                    + "<table>"
                    + "<thead>";
                    schemHtml += "</thead>";
                    schemHtml += "<tbody>";

                    schemHtml += "<tr>";
                    schemHtml += "<th height=15px></th>";
                    for (int i = 0; i < stocksList?.Stocks[p].Columns.Count; i++)
                    {
                        schemHtml += "<th width=" + (stocksList?.Stocks[p].Columns[i].Size + 20) + "px height=15px><div style =\"min-width:" + (stocksList?.Stocks[p].Columns[i].Size + 20) + "px\" class=\"Table" + stocksList.Stocks[p].Id + "\">" + stocksList?.Stocks[p].Columns[i].DisplayName + "</div></th>"; //Вывод названия столбцов таблицы по вертикале
                    }
                    schemHtml += "</tr>";

                    for (int j = 0; j < stocksList?.Stocks[p].Rows.Count; j++)
                    {
                        if (stocksList?.Stocks[p].Rows[j].Visibility == 1)
                        {
                            schemHtml += "<tr>";
                            schemHtml += "<th height=15>" + stocksList?.Stocks[p].Rows[j].RowName + "</th>";
                            for (int i = 0; i < stocksList?.Stocks[p].Columns.Count; i++)
                            {
                                if (stocksList?.Stocks[p].Rows[j].Visibility == 1)//Проверка на то что можно отрисовывать
                                {                                   
                                    if (j < stocksList?.Stocks[p].Columns[i].CellsList.Count)//Для нормальной отрисовки столбцов разной размерности
                                    {
                                        schemHtml += "<td width=" + (stocksList?.Stocks[p].Columns[i].Size + 20) + "px bgcolor=" + stocksList?.Stocks[p].Columns[i].CellsList[j].Statuses[0].ColorHex + " height=15px><div style=\"min-width:" + (stocksList?.Stocks[p].Columns[i].Size + 20) + "px\" class=\"Table" + stocksList.Stocks[p].Id + "\" id=\"" + stocksList?.Stocks[p].Columns[i].CellsList[j].Name + "\">" + stocksList?.Stocks[p].Columns[i].CellsList[j].Containers.Count + "</div></td>"; //Содержимое таблицы
                                    }
                                    else
                                    {
                                        schemHtml += "<th></th>";
                                    }
                                }
                            }
                            schemHtml += "</tr>";
                        }
                    }


                    schemHtml += "<tr>";
                    schemHtml += "<th height=15px></th>";
                    for (int i = 0; i < stocksList?.Stocks[p].Columns.Count; i++)
                    {
                        schemHtml += "<th width=" + (stocksList?.Stocks[p].Columns[i].Size + 20) + "px height=15px><div style=\"min-width:" + (stocksList?.Stocks[p].Columns[i].Size + 20) + "px\" class=\"Table" + stocksList.Stocks[p].Id + "\">" + stocksList?.Stocks[p].Columns[i].DisplayName + "</div></th>"; //Вывод названия строк таблицы по горизонтали
                    }
                    schemHtml += "</tr>";

                    schemHtml += "</tbody>";
                    schemHtml += "</table>";
                    schemHtml += "</div>";
                }
                else if (stocksList.Stocks[p].Orientation == 2) //Отрисовка вертикально
                {
                    schemHtml += "<style type=\"text/css\">"
                    + ".divTable" + stocksList.Stocks[p].Id + "{-moz-transform: rotate(0deg);-webkit-transform: rotate(0deg);-o-transform: rotate(0deg);table-layout: fixed;overflow:hidden;position:absolute;top:" + stocksList.Stocks[p].PositionY + "px;left:" + stocksList.Stocks[p].PositionX + "px;table-layout: fixed;}"
                    + ".divTable" + stocksList.Stocks[p].Id + " TH {font-weight: bold;padding: 1px;font-size: 10px;}"
                    + ".divTable" + stocksList.Stocks[p].Id + " TD {border: 1px solid black;padding: 1px;font-size: 10px;}"
                    + ".divTable" + stocksList.Stocks[p].Id + " TD:hover {border: 1px solid black;padding: 1px;text-align: center;font-size: 10px;background: #F08080;}"
                    + "</style>"
                    + "<div class=\"divTable" + stocksList.Stocks[p].Id + "\" id=\"Table" + stocksList.Stocks[p].Id + "\">"
                    + "<strong>" + stocksList.Stocks[p].Name + "</strong>"
                    + "<table>"
                    + "<thead>";
                    schemHtml += "</thead>";
                    schemHtml += "<tbody>";


                    for (int i = 0; i < stocksList?.Stocks[p].Columns.Count; i++)
                    {
                        schemHtml += "<tr>";
                        schemHtml += "<th height=" + (stocksList?.Stocks[p].Columns[i].Size + 20) + "px width=15px><div style=\"min-height:" + (stocksList?.Stocks[p].Columns[i].Size + 20) + "px;min-width:15px;\">" + stocksList?.Stocks[p].Columns[i].DisplayName + "</div></th>"; //Вывод название строки (лево)
                        for (int j = 0; j < stocksList?.Stocks[p].Rows.Count; j++)
                        {                           
                            if (stocksList?.Stocks[p].Rows[j].Visibility == 1)//Проверка на то что можно отрисовывать
                            {
                                schemHtml += "<td height=" + (stocksList?.Stocks[p].Columns[i].Size + 20) + "px bgcolor=" + stocksList?.Stocks[p].Columns[i].CellsList[j].Statuses[0].ColorHex + " width=15px><div style=\"min-height:" + (stocksList?.Stocks[p].Columns[i].Size + 20) + "px;min-width:15px;\"class=\"Table" + stocksList.Stocks[p].Id + "\"id=\"" + stocksList?.Stocks[p].Columns[i].CellsList[j].Name + "\">" + stocksList?.Stocks[p].Columns[i].CellsList[j].Containers.Count + "</div></td>"; //Содержимое таблицы
                            }
                            else
                            {
                                schemHtml += "<th></th>";
                            }
                        }
                        schemHtml += "<th height=" + (stocksList?.Stocks[p].Columns[i].Size + 20) + "px width=15px><div style=\"min-height:" + (stocksList?.Stocks[p].Columns[i].Size + 20) + "px;min-width:15px;\"class=\"Table" + stocksList.Stocks[p].Id + "\">" + stocksList?.Stocks[p].Columns[i].DisplayName + "</div></th>"; //Вывод название строки (право)
                        schemHtml += "</tr>";
                    }

                    schemHtml += "</tbody>";
                    schemHtml += "</table>";
                    schemHtml += "</div>";
                }
            }           
        }
        catch (Exception ex)
        {
            schemHtml = ex.ToString();
        }
    }


    async Task HTmlPopupMenu()
    {
        // popupMenu += "";
        // popupMenu += "<style type=\"text/css\">"
        // + ".divPopupMenu {position:absolute;top:30%;right:30px;border-width:1px; border-color:black;border-style:solid; width:50%;height:50%;background-color:grey;}"
        // + "</style>"
        // + "<div class=\"divPopupMenu\"></div>";

    }

    async Task HtmlTableBody()
    {
        idZone = await JsRuntime.InvokeAsync<string>("positionZoneNet"); //Получение idZone из функции js
        topTableBodyHtml = "";  //Очистка перед отрисовкой
        try
        {
            var stocksList = await StocksListJson();
            topTableBodyHtml += "<style type=\"text/css\">"
            + ".BottomTable {border-collapse: collapse;min-height:100px;max-height: 150px;display: inline-block;}"
            + ".BottomTable TD {border: 1px solid black;padding: 1px;font-size: 10px;}"
            + "</style>";
            for (int p = 0; p < stocksList.Stocks.Count; p++)//Отрисовка тела таблицы
            {
                for (int i = 0; i < stocksList.Stocks[p].Columns.Count; i++)
                {
                    for (int j = 0; j < stocksList.Stocks[p].Columns[i].CellsList.Count; j++)
                    {
                        if (stocksList.Stocks[p].Columns[i].CellsList[j].Name == idZone)
                        {
                            for (int a = 0; a < stocksList.Stocks[p].Columns[i].CellsList[j].Containers.Count; a++)
                            {


                                topTableBodyHtml += "<tr>";
                                topTableBodyHtml += "<td>" + stocksList.Stocks[p].Columns[i].CellsList[j].Containers[a].ZIndex + "</td>";//Заполнение Этажа
                                topTableBodyHtml += "<td>" + stocksList.Stocks[p].Columns[i].CellsList[j].Name + "</td>";//Заполнение Положения
                                if (stocksList.Stocks[p].Columns[i].CellsList[j].Containers[a].Type40Or20 == 20) //Проверка на тип контейнера
                                {
                                    topTableBodyHtml += "<td>22G1</td>";//Заполнение типа
                                }
                                else if (stocksList.Stocks[p].Columns[i].CellsList[j].Containers[a].Type40Or20 == 40)
                                {
                                    topTableBodyHtml += "<td>45G1</td>";//Заполнение типа
                                }
                                topTableBodyHtml += "<td>" + stocksList.Stocks[p].Columns[i].CellsList[j].Containers[a].Number + "</td>";//Заполнение Номера
                                topTableBodyHtml += "<td>30480</td>";//Заполнение грузоподъемности (временное)
                                topTableBodyHtml += "<td>2100</td>";//Заполнение тары (временное)
                                topTableBodyHtml += "<td>ФИТ ООО</td>";//Заполнение владельца (временное)
                                topTableBodyHtml += "<td>23.09.2023 14:29:00</td>";//Заполнение даты завоза (временное)
                                topTableBodyHtml += "<td>ЗПУ:</td>";//Заполнение спец отметки (временное)
                                topTableBodyHtml += "<td>Пусто</td>";//Заполнение перевозчик по разнарядке (временное)
                                topTableBodyHtml += "<td>СТЛ-УРАЛ ООО</td>";//Заполнение экспедитор (временное)
                                topTableBodyHtml += "<td><input type='checkbox' checked></td>";//Заполнение порож (временное)
                                topTableBodyHtml += "<td>Поезд: , ст.: </td>";//Заполнение Заявка КТ 2.0 (временное)
                                topTableBodyHtml += "<td>Пусто</td>";//Заполнение Направление (временное)
                                topTableBodyHtml += "<td>" + stocksList.Stocks[p].Columns[i].CellsList[j].Containers[a].AcceptanceBidId + "</td>";//Заполнение Номер заявки
                                topTableBodyHtml += "<td>Пусто</td>";//Заполнение Статус (временное)
                                topTableBodyHtml += "</tr>";

                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {

        }
    }

    async Task ContainerSearch()//Поиск контейнера
    {
        containerNumber = await JsRuntime.InvokeAsync<string>("containerNumberValue"); //Получение номера контейнера из функции js;
        try
        {
            if (containerNumber?.Length > 5)//Проверка что в поле ContainerNumber больше 5 символов
            {
                var stocksList = await StocksListJson();
                for (int p = 0; p < stocksList.Stocks.Count; p++)
                {
                    for (int i = 0; i < stocksList.Stocks[p].Columns.Count; i++)
                    {
                        for (int j = 0; j < stocksList.Stocks[p].Columns[i].CellsList.Count; j++)
                        {
                            for (int a = 0; a < stocksList.Stocks[p].Columns[i].CellsList[j].Containers.Count; a++)
                            {
                                if (stocksList.Stocks[p].Columns[i].CellsList[j].Containers[a].Number.Contains(containerNumber))
                                {
                                    nameIdZone = stocksList.Stocks[p].Columns[i].CellsList[j].Name; 
                                    await JsRuntime.InvokeVoidAsync("changeStrokeColor", nameIdZone);//Обводка ячейки с необходимым контейнером
                                    if (oldnameIdZone != "")
                                    {
                                        if (oldnameIdZone != nameIdZone)
                                        {
                                            await JsRuntime.InvokeVoidAsync("cleaningStrokeColor", oldnameIdZone);//Очистка прошлой ячейки от обводки
                                        }
                                    }
                                    oldnameIdZone = nameIdZone;
                                }                              
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {                     
            ex.ToString();
        }
    }

  
    async Task<TMS.Domain.Models.StocksList> StocksListJson()
    {
        var textResponse = await HttpClient();
        TMS.Domain.Models.StocksList? stocksList = JsonConvert.DeserializeObject<TMS.Domain.Models.StocksList>(textResponse);
        return stocksList;
    }


    async Task<string> HttpClient()
    {       
        try
        {
            HttpClient httpClient = ClientFactory.CreateClient();
            var request = await httpClient.GetAsync("https://tapi2.cit-ekb.ru/Api/Scheme/GetScheme");
            var response = await request.Content.ReadAsStringAsync();
            return response;  
        }
        catch (Exception ex)
        {
            return ex.ToString();
        }
    }
}