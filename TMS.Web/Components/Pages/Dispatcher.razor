@page "/Dispatcher"
@using Microsoft.AspNetCore.Components.Web
@rendermode RenderMode.InteractiveServer
@inject IHttpClientFactory ClientFactory
@using System.Text.Json
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using Newtonsoft.Json;
@using Newtonsoft.Json.Converters;

<PageTitle>Dispatcher</PageTitle>


<div class="TopTables">
    <div class="TableGroupNameAcceptContainer">
       <strong>ПРИНЯТЬ КОНТЕЙНЕР НА ТЕРМИНАЛ</strong>
   </div>
    <div class="TableGroupNameIssueContainer">
       <strong>ВЫДАТЬ КОНТЕЙНЕР С ТЕРМИНАЛА</strong>
    </div>
    <div class="TableGroupNameIssueStock">
        <strong>СТОК ВЫДАЧИ</strong>
    </div>
    <div class="TableGroupNameAcceptContainer">
        <strong>ТЕРМИНАЛ ПЕРЕМЕЩЕНИЯ</strong>
    </div>
</div>


<div class="TopLine">
    <label for="SchemeSelect">Схема:</label>
    <select id="SchemeSelect" name="SchemeSelect">
        @for (int i = 1; i <=3; i++)
        {
            <option value="Test">Test</option>
        }
    </select>
    <input name="ButtonChangeMode" type="button" value=" Вкл. режим редактирования "> |
    <input name="ButtonUpdateSchema" type="button" value=" Обновить схему "> |
    <button name="ButtonRotation" onclick="rotateElem()">Поворот</button> |
    <button name="ButtonDownloadDiagram" @onclick="HtmlShems">Загрузить схему</button>
    <input type="text" name="ContainerNumber" placeholder="Поиск по № контейнера" />
</div>

<div class="BottomDiagram" onmousedown="handChange" onmouseup="grabChange">
   @*  <BECanvas Width="500" Height="500" @ref="_canvasReference"></BECanvas> *@
    @((MarkupString)schemHtml)
</div>


<script>//Поворот элемента
    let x = 0;
    function rotateElem() {
        x += 45;
        document.querySelector('.Table1').style.transform
            = "rotate("+x+"deg)";
    }
</script>

<script>//Cкролл BottomDiagram при зажатий левой кнопки мыши    
    (function () {
        let speed = 1; // Скорость скролла.
        let scroll = document.querySelector('.BottomDiagram');
        let left = 0; // отпустили мышку - сохраняем положение скролла
        let top = 0;
        let drag = false;
        let coorX = 0; // нажали мышку - сохраняем координаты.
        let coorY = 0;
        event.preventDefault();
            scroll.addEventListener('mousedown', function (e) {
            if (event.button == 0 || event.button == 1) {
                drag = true;
                coorX = e.pageX - this.offsetLeft;
                coorY = e.pageY - this.offsetTop;
            }
            });
            document.addEventListener('mouseup', function () {
            if (event.button == 0 || event.button == 1)
            {
                drag = false;
                left = scroll.scrollLeft;
                top = scroll.scrollTop;
            }
            });
            scroll.addEventListener('mousemove', function (e) {
                if (drag) {
                    this.scrollLeft = left - (e.pageX - this.offsetLeft - coorX) * speed;
                    this.scrollTop = top - (e.pageY - this.offsetTop - coorY) * speed;
                }
            });
    })();
</script>



@code{
    // private Canvas2DContext _context;

    // protected BECanvasComponent _canvasReference;

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     try
    //     {
    //         this._context = await this._canvasReference.CreateCanvas2DAsync();
    //         var strResponse = await SendingRequestDiagram();
    //         TMS.Domain.Models.Root? root = JsonSerializer.Deserialize<TMS.Domain.Models.Root>(strResponse);

    //         var LinstRowName = root.rows.Select(a => a.rowName).ToList();

    //         for (int i = 0; i < LinstRowName.Count; i++)
    //         {
    //             await this._context.StrokeTextAsync(LinstRowName[i], Convert.ToDouble(root.positionX + 5), Convert.ToDouble(root.positionY + 50)+i*30); //Отрисовка имени ряда
    //         }    
    //         await this._context.SetFontAsync("14px Arial"); //Стиль отрисовки текста
    //         await this._context.StrokeTextAsync(root?.name, Convert.ToDouble(root.positionX + 20), Convert.ToDouble(root.positionY+12));  //Отрисовка имени зоны
    //         /* await this._context.StrokeRectAsync(10, 30, 400, 100); */ //Отрисовка области зоны
    //         for (int i = 1; i <= root?.columns.Count; i++)
    //         {
    //             await this._context.StrokeRectAsync(Convert.ToDouble(root.positionX + 20) * i, Convert.ToDouble(root.positionY + 30), 20, Convert.ToDouble(root?.rows.Count*30));//Отрисовка колонок
    //         }
    //         for (int j = 1; j <= root?.rows.Count; j++)
    //         {
    //             await this._context.StrokeRectAsync(Convert.ToDouble(root.positionX + 20), Convert.ToDouble(root.positionY + 30) * j, Convert.ToDouble(root?.columns.Count * 20), 30);//Отрисовка столбцов
    //         }



    //     }
    //     catch (Exception ex)
    //     {
    //         await DispatchExceptionAsync(ex);
    //     }


    // }



    async Task RotationDiv()
    {
        
    }


    string schemHtml = "";


    async Task HtmlShems()
    {
        schemHtml = ""; //Очистка перед отрисовкой
        try
        {
            var stocksList = await StocksListJson();
            for (int g = 0; g < stocksList.GraphicalObjectsScheme.Count; g++) //Отрисовка графических элементов
            {
                if (stocksList.GraphicalObjectsScheme[g].HorizontalText == true)
                {
                    schemHtml += "<style type=\"text/css\">"
                  + ".GraphicalObjects" + stocksList.GraphicalObjectsScheme[g].Id + "{position:absolute;top:" + stocksList.GraphicalObjectsScheme[g].PositionY + "px;left:" + stocksList.GraphicalObjectsScheme[g].PositionX + "px;border-width:1px; border-color:black;border-style:solid;width:" + stocksList.GraphicalObjectsScheme[g].Width + "px;height:" + stocksList.GraphicalObjectsScheme[g].Height + "px;}"
                  + ".Text" + stocksList.GraphicalObjectsScheme[g].Id + " {font-size:" + stocksList.GraphicalObjectsScheme[g].FontSize + "px;top:" + stocksList.GraphicalObjectsScheme[g].PositionTextY + "px;left:" + stocksList.GraphicalObjectsScheme[g].PositionTextX + "px;width:" + stocksList.GraphicalObjectsScheme[g].WidthTxt + "px;height:" + stocksList.GraphicalObjectsScheme[g].HeightTxt + "px;border: 1px solid black;text-align: center;overflow:hidden;position:absolute;font-weight:bold;}"
                  + "</style>"
                  + "<div class=\"GraphicalObjects" + stocksList.GraphicalObjectsScheme[g].Id + "\">"
                  + "<div class=\"Text" + stocksList.GraphicalObjectsScheme[g].Id + "\">"
                  + stocksList.GraphicalObjectsScheme[g].Text
                  + "</div>"
                  + "</div>";
                }
                else if (stocksList.GraphicalObjectsScheme[g].HorizontalText == false)
                {
                    schemHtml += "<style type=\"text/css\">"
                  + ".GraphicalObjects" + stocksList.GraphicalObjectsScheme[g].Id + "{position:absolute;top:" + stocksList.GraphicalObjectsScheme[g].PositionY + "px;left:" + stocksList.GraphicalObjectsScheme[g].PositionX + "px;border-width:1px; border-color:black;border-style:solid;width:" + stocksList.GraphicalObjectsScheme[g].Width + "px;height:" + stocksList.GraphicalObjectsScheme[g].Height + "px;}"
                  + ".Text" + stocksList.GraphicalObjectsScheme[g].Id + " {font-size:" + stocksList.GraphicalObjectsScheme[g].FontSize + "px;top:" + stocksList.GraphicalObjectsScheme[g].PositionTextY + "px;left:" + stocksList.GraphicalObjectsScheme[g].PositionTextX + "px;width:" + stocksList.GraphicalObjectsScheme[g].WidthTxt + "px;height:" + stocksList.GraphicalObjectsScheme[g].HeightTxt + "px; border: 1px solid black;text-align: center; writing-mode: vertical-lr;overflow:hidden;position:absolute;font-weight:bold;}"
                  + "</style>"
                  + "<div class=\"GraphicalObjects" + stocksList.GraphicalObjectsScheme[g].Id + "\">"
                  + "<div class=\"Text" + stocksList.GraphicalObjectsScheme[g].Id + "\">"
                  + stocksList.GraphicalObjectsScheme[g].Text
                  + "</div>"
                  + "</div>";
                }
            }
            for (int p = 0; p < stocksList.Stocks.Count; p++)//Отрисовка таблиц
            {
                if (stocksList.Stocks[p].Orientation == 1) //Отрисовка горизонтально    
                {
                    schemHtml += "<style type=\"text/css\">"
                    + ".Table" + stocksList.Stocks[p].Id + "{-moz-transform: rotate(0deg);-webkit-transform: rotate(0deg);-o-transform: rotate(0deg);table-layout: fixed;overflow:hidden;position:absolute;top:" + stocksList.Stocks[p].PositionY + "px;left:" + stocksList.Stocks[p].PositionX + "px;table-layout: fixed;}"
                    + "TH {font-weight: bold;padding: 1px;text-align:center;font-size: 10px;}"
                    + "TD {border: 1px solid black;padding: 1px;text-align: center;font-size: 10px;}"
                    + "TD:hover {border: 1px solid black;padding: 1px;text-align: center;font-size: 10px;background: #F08080;}"
                    + "</style>"
                    + "<div class=\"Table" + stocksList.Stocks[p].Id + "\">"
                    + "<strong>" + stocksList.Stocks[p].Name + "</strong>"
                    + "<table>"
                    + "<thead>";
                    schemHtml += "</thead>";
                    schemHtml += "<tbody>";

                    schemHtml += "<tr>";
                    schemHtml += "<th height=15px></th>";
                    for (int i = 0; i < stocksList?.Stocks[p].Columns.Count; i++)
                    {
                        schemHtml += "<th width=" + (stocksList?.Stocks[p].Columns[i].Size + 20) + "px height=15px><div style=\"min-width:" + (stocksList?.Stocks[p].Columns[i].Size + 20) + "px\">" + stocksList?.Stocks[p].Columns[i].DisplayName + "</div></th>"; //Вывод названия столбцов таблицы по вертикале
                    }
                    schemHtml += "</tr>";


                    for (int j = 0; j < stocksList?.Stocks[p].Rows.Count; j++)
                    {
                        if (stocksList?.Stocks[p].Rows[j].Visibility == 1)
                        {
                            schemHtml += "<tr>";
                            schemHtml += "<th height=15>" + stocksList?.Stocks[p].Rows[j].RowName + "</th>";
                            for (int i = 0; i < stocksList?.Stocks[p].Columns.Count; i++)
                            {
                                if (stocksList?.Stocks[p].Rows[j].Visibility == 1)//Проверка на то что можно отрисовывать
                                {
                                    if (j < stocksList?.Stocks[p].Columns[i].CellsList.Count)//Для нормальной отрисовки столбцов разной размерности
                                    {
                                        schemHtml += "<td width=" + (stocksList?.Stocks[p].Columns[i].Size + 20) + "px bgcolor=" + stocksList?.Stocks[p].Columns[i].CellsList[j].Statuses[0].ColorHex + " height=15px><div style=\"min-width:" + (stocksList?.Stocks[p].Columns[i].Size + 20) + "px\">" + stocksList?.Stocks[p].Columns[i].CellsList[j].Containers.Count + "</div></td>"; //Содержимое таблицы
                                    }
                                    else
                                    {
                                        schemHtml += "<th></th>";
                                    }
                                }
                            }
                            schemHtml += "</tr>";
                        }
                    }


                    schemHtml += "<tr>";
                    schemHtml += "<th height=15px></th>";
                    for (int i = 0; i < stocksList?.Stocks[p].Columns.Count; i++)
                    {
                        schemHtml += "<th width=" + (stocksList?.Stocks[p].Columns[i].Size + 20) + "px height=15px><div style=\"min-width:" + (stocksList?.Stocks[p].Columns[i].Size + 20) + "px\">" + stocksList?.Stocks[p].Columns[i].DisplayName + "</div></th>"; //Вывод названия строк таблицы по горизонтали
                    }
                    schemHtml += "</tr>";

                    schemHtml += "</tbody>";
                    schemHtml += "</table>";
                    schemHtml += "</div>";
                }
                else if (stocksList.Stocks[p].Orientation == 2) //Отрисовка вертикально
                {
                    schemHtml += "<style type=\"text/css\">"
                    + ".Table" + stocksList.Stocks[p].Id + "{-moz-transform: rotate(0deg);-webkit-transform: rotate(0deg);-o-transform: rotate(0deg);table-layout: fixed;overflow:hidden;position:absolute;top:" + stocksList.Stocks[p].PositionY + "px;left:" + stocksList.Stocks[p].PositionX + "px;table-layout: fixed;}"
                    + "TH {font-weight: bold;padding: 1px;font-size: 10px;}"
                    + "TD {border: 1px solid black;padding: 1px;font-size: 10px;}"
                    + "TD:hover {border: 1px solid black;padding: 1px;text-align: center;font-size: 10px;background: #F08080;}"
                    + "</style>"
                    + "<div class=\"Table" + stocksList.Stocks[p].Id + "\">"
                    + "<strong>" + stocksList.Stocks[p].Name + "</strong>"
                    + "<table>"
                    + "<thead>";
                    schemHtml += "</thead>";
                    schemHtml += "<tbody>";


                    for (int i = 0; i < stocksList?.Stocks[p].Columns.Count; i++)
                    {
                        schemHtml += "<tr>";
                        schemHtml += "<th height=" + (stocksList?.Stocks[p].Columns[i].Size + 20) + "px width=15px><div style=\"min-height:" + (stocksList?.Stocks[p].Columns[i].Size + 20) + "px;min-width:15px;\">" + stocksList?.Stocks[p].Columns[i].DisplayName + "</div></th>"; //Вывод название строки (лево)
                        for (int j = 0; j < stocksList?.Stocks[p].Rows.Count; j++)
                        {
                            if (stocksList?.Stocks[p].Rows[j].Visibility == 1)//Проверка на то что можно отрисовывать
                            {
                                schemHtml += "<td height=" + (stocksList?.Stocks[p].Columns[i].Size + 20) + "px bgcolor=" + stocksList?.Stocks[p].Columns[i].CellsList[j].Statuses[0].ColorHex + " width=15px><div style=\"min-height:" + (stocksList?.Stocks[p].Columns[i].Size + 20) + "px;min-width:15px;\">" + stocksList?.Stocks[p].Columns[i].CellsList[j].Containers.Count + "</div></td>"; //Содержимое таблицы
                            }
                            else
                            {
                                schemHtml += "<th></th>";
                            }
                        }
                        schemHtml += "<th height=" + (stocksList?.Stocks[p].Columns[i].Size + 20) + "px width=15px><div style=\"min-height:" + (stocksList?.Stocks[p].Columns[i].Size + 20) + "px;min-width:15px;\">" + stocksList?.Stocks[p].Columns[i].DisplayName + "</div></th>"; //Вывод название строки (право)
                        schemHtml += "</tr>";
                    }

                    schemHtml += "</tbody>";
                    schemHtml += "</table>";
                    schemHtml += "</div>";
                }
            }           
        }
        catch (Exception ex)
        {
            schemHtml = ex.ToString();
        }
    }



    async Task<TMS.Domain.Models.StocksList> StocksListJson()
    {
        var textResponse = await HttpClient();
        TMS.Domain.Models.StocksList? stocksList = JsonConvert.DeserializeObject<TMS.Domain.Models.StocksList>(textResponse);
        return stocksList;
    }


    async Task<string> HttpClient()
    {       
        try
        {
            HttpClient httpClient = ClientFactory.CreateClient();
            var request = await httpClient.GetAsync("https://tapi2.cit-ekb.ru/Api/Scheme/GetScheme");
            var response = await request.Content.ReadAsStringAsync();
            return response;  
        }
        catch (Exception ex)
        {
            return ex.ToString();
        }
    }
}