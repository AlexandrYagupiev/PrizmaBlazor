@page "/Dispatcher"
@using Microsoft.AspNetCore.Components.Web
@rendermode RenderMode.InteractiveServer
@inject IHttpClientFactory ClientFactory
@using System.Text.Json
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D


<PageTitle>Dispatcher</PageTitle>


<div class="TopTables">
    <div class="TableGroupNameAcceptContainer">
       <strong>ПРИНЯТЬ КОНТЕЙНЕР НА ТЕРМИНАЛ</strong>
   </div>
    <div class="TableGroupNameIssueContainer">
       <strong>ВЫДАТЬ КОНТЕЙНЕР С ТЕРМИНАЛА</strong>
    </div>
    <div class="TableGroupNameIssueStock">
        <strong>СТОК ВЫДАЧИ</strong>
    </div>
    <div class="TableGroupNameAcceptContainer">
        <strong>ТЕРМИНАЛ ПЕРЕМЕЩЕНИЯ</strong>
    </div>
</div>

<div class="TopLine">
    <label for="scheme">Схема:</label>
    <select id="scheme" name="scheme">
        @for (int i = 1; i <=3; i++)
        {
            <option value="Test">Test</option>
        }
    </select>
    <input name="ButtonChangeMode" type="button" value=" Вкл. режим редактирования "> |
    <input name="ButtonUpdateSchema" type="button" value=" Обновить схему "> |
    <input name="ButtonTest" type="button" value=" Тестовая кнопка "> |
     @* <button name="ButtonDownloadDiagram" @onclick="ReturnTable">Загрузить схему</button> *@
    <input type="text" name="ContainerNumber" placeholder="Поиск по № контейнера" />
</div>

<div class="BottomDiagram">
    <BECanvas Width="500" Height="500" @ref="_canvasReference"></BECanvas>
</div>


@code{
    private Canvas2DContext _context;

    protected BECanvasComponent _canvasReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            this._context = await this._canvasReference.CreateCanvas2DAsync();
            var strResponse = await SendingRequestDiagram();
            TMS.Domain.Models.Root? root = JsonSerializer.Deserialize<TMS.Domain.Models.Root>(strResponse);

            var LinstRowName = root.rows.Select(a => a.rowName).ToList();

            for (int i = 0; i < LinstRowName.Count; i++)
            {
                await this._context.StrokeTextAsync(LinstRowName[i], Convert.ToDouble(root.positionX + 5), Convert.ToDouble(root.positionY + 50)+i*30); //Отрисовка имени ряда
            }



          


            await this._context.SetFontAsync("14px Arial"); //Стиль отрисовки текста
            await this._context.StrokeTextAsync(root?.name, Convert.ToDouble(root.positionX + 20), Convert.ToDouble(root.positionY+12));  //Отрисовка имени зоны
            /* await this._context.StrokeRectAsync(10, 30, 400, 100); */ //Отрисовка области зоны
            for (int i = 1; i <= root?.columns.Count; i++)
            {
                await this._context.StrokeRectAsync(Convert.ToDouble(root.positionX + 20) * i, Convert.ToDouble(root.positionY + 30), 20, Convert.ToDouble(root?.rows.Count*30));//Отрисовка колнок
            }
            for (int j = 1; j <= root?.rows.Count; j++)
            {
                await this._context.StrokeRectAsync(Convert.ToDouble(root.positionX + 20), Convert.ToDouble(root.positionY + 30) * j, Convert.ToDouble(root?.columns.Count * 20), 30);//Отрисовка столбцов
            }
            
            

        }
        catch (Exception ex)
        {
            await DispatchExceptionAsync(ex);
        }


    }

    async Task<string> SendingRequestDiagram()
    {       
        try
        {
            HttpClient httpClient = ClientFactory.CreateClient();
            var request = await httpClient.GetAsync("https://tapi2.cit-ekb.ru/Api/Scheme/GetStock");
            var response = await request.Content.ReadAsStringAsync();
            return response;  
        }
        catch
        {
            return "Error";
        }
    }
}